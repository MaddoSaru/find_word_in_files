{"query_CoverGenius_Insurance_Signup_XFjwOA.json": "-- updated to replace all and added signup date and week\nSELECT \n\tci.merchant_id,\n\tm.company,\n\tFROM_UNIXTIME(ci.created, '%Y-%m-%d') as insurance_signup_date,\n\tFROM_UNIXTIME(ci.created, '%Y-W%u') as insurance_signup_year_week\nFROM client_insurance ci \nLEFT JOIN merchant m ON ci.merchant_id = m.id\nWHERE ci.insurance_id BETWEEN 10 AND 14\nAND ci.archived = 0\nAND m.archived = 0\n", "query_Q_number_of_active_insured_brands_P8ghkI.json": "WITH total_insured_brands AS (\n\tSELECT\n\t\tci.merchant_id insured_brand_id\n\tFROM client_insurance ci \n\tWHERE ci.merchant_id IS NOT NULL\n  \tAND ci.archived = 0\n),\nlatest_label_print_date_by_brand AS ( \n  SELECT \n  \ts.merchant_id, \n  \tMAX(s.time_bought) latest_label_print_date \n  FROM shipment s \n  JOIN merchant_clean mc ON s.merchant_id = mc.id\n  WHERE s.time_bought >= 1641013200 GROUP BY 1\n ),\ntotal_active_brands AS ( \n  SELECT \n  \tmerchant_id AS active_brand_id\n  FROM latest_label_print_date_by_brand \n  WHERE latest_label_print_date >= UNIX_TIMESTAMP(NOW() - INTERVAL 90 DAY)\n)\nSELECT \n\tt1.active_brand_id,\n\tt2.insured_brand_id\nFROM total_active_brands t1\nLEFT JOIN total_insured_brands t2 on t1.active_brand_id = t2.insured_brand_id", "query_Q_passport_brand_active_services_wV6dZk.json": "WITH sor_status AS (\n\tSELECT \n\t\tm.id,\n\t\tCASE WHEN m.passport_uk_tax IS NULL THEN 'SOR UK Not Active' ELSE 'SOR UK Active' END AS uk_sor_status,\n\t\tCASE WHEN m.passport_eu_tax IS NULL THEN 'SOR EU Not Active' ELSE 'SOR EU Active' END AS eu_sor_status\n\tFROM merchant_clean m \n),\ninsurance_status AS (\n\tSELECT\n\t\tci.merchant_id,\n\t\tCASE WHEN ci.merchant_id IS NULL THEN 'Insurance Not Active' ELSE 'Insurance Active' END AS insurance_status\n\tFROM client_insurance ci \n),\nservice_types AS (\n\t SELECT\n\t\trf.client_id,\n\t\tc.company 'Client',\n\t\tCASE\n\t\t\tWHEN rf.merchant_id IS NULL THEN m2.id\n\t\t\tELSE rf.merchant_id\n\t\tEND 'merchant_id',\n\t\tsl.full_name 'service_level',\n\t\tDATE(FROM_UNIXTIME(start_date)) 'service_start_date',\n\t\tDATE(FROM_UNIXTIME(end_date)) 'End Date'\n\tFROM\n\t\trate_filter rf\n\tLEFT JOIN merchant_clean m ON\n\t\tm.id = rf.merchant_id\n\tLEFT JOIN client c ON\n\t\tc.id = rf.client_id\n\tLEFT JOIN merchant_clean m2 ON\n\t\tm2.client_id = c.id\n\tLEFT JOIN service_level sl ON\n\t\tsl.id = rf.service_level_id\n\tWHERE\n\t\t(end_date IS NULL\n\t\t\tOR DATE(FROM_UNIXTIME(end_date)) > NOW())\n\tGROUP BY\n\t\trf.client_id,\n\t\trf.merchant_id,\n\t\trf.service_level_id\n)\nSELECT  \n\tmc.id,\n\tmc.salesforce_account_id,\n\tmc.company AS 'brand',\n\tc.company AS '3pl',\n\tuk_sor_status,\n\teu_sor_status,\n\tCOALESCE(in_s.insurance_status,'Insurance Not Active') AS insurance_status,\n\ts_t.service_level,\n\ts_t.service_start_date\nFROM merchant_clean mc\nLEFT JOIN client c ON mc.client_id = c.id\nLEFT JOIN sor_status s_s ON mc.id = s_s.id\nLEFT JOIN insurance_status in_s ON mc.id = in_s.merchant_id\nLEFT JOIN service_types s_t ON mc.id = s_t.merchant_id", "query_Q_number_of_insured_brands_h2h5Qp.json": "WITH insured_brands_by_year_month AS (\n\tSELECT\n\t\tFROM_UNIXTIME(ci.created, '%Y-%M') AS insurance_created_year_month,\n\t\tCOUNT(ci.merchant_id) AS insured_brand_count\n\tFROM client_insurance ci \n\tWHERE ci.merchant_id IS NOT NULL\n\tGROUP BY 1\n),\ntotal_brands_by_year_month AS (\n\tSELECT\n\t\tFROM_UNIXTIME(m.created, '%Y-%M') AS brand_created_year_month,\n\t\tCOUNT(m.id) AS brand_count\n\tFROM merchant_clean m \n\tGROUP BY 1\n),\nlatest_label_print_date_by_brand AS ( \n  SELECT \n  \ts.merchant_id, \n  \tMAX(s.time_bought) latest_label_print_date \n  FROM shipment s \n  JOIN merchant_clean mc ON s.merchant_id = mc.id\n  WHERE s.time_bought >= 1641013200 GROUP BY 1\n ),\ntotal_active_brands_by_year_month AS ( \n  SELECT \n  \tCOUNT(merchant_id) AS active_brand_count \n  FROM latest_label_print_date_by_brand \n  WHERE latest_label_print_date >= UNIX_TIMESTAMP(NOW() - INTERVAL 90 DAY)\n)\nSELECT \n\tt1.brand_created_year_month AS 'year_month',\n\tt1.brand_count,\n\tt2.insured_brand_count,\n\tt3.active_brand_count\nFROM total_brands_by_year_month t1\nLEFT JOIN insured_brands_by_year_month t2 ON t1.brand_created_year_month = t2.insurance_created_year_month\nLEFT JOIN total_active_brands_by_year_month t3 ON t1.brand_created_year_month = FROM_UNIXTIME(UNIX_TIMESTAMP(NOW()), '%Y-%M')", "query_Cover_Genius_Insurance_Limit_AOV_per_Brand_nfz8DZ.json": "WITH client_ins AS (\n\tSELECT \n\t\tmerchant_id,\n\t\tinsurance_id\n\tFROM \n\t\tclient_insurance\n),\norder_val AS (\n\tSELECT \n\t\titem.shipment_id,\n\t\tSUM(item.value) AS ORD_VALUE\n\tFROM\n\t\tshipment AS ship\n\tINNER JOIN\n\t\titem\n\tON\n\t\tship.id = item.shipment_id\n\tINNER JOIN \n\t\tclient_ins AS cins \n\tON\n\t\tship.merchant_id = cins.merchant_id\n\tWHERE \n\t\tship.time_bought >= UNIX_TIMESTAMP(20220101)\n\tGROUP BY\n\t\tshipment_id\n)\nSELECT\n\tCONCAT(YEAR(FROM_UNIXTIME(ship.time_bought)),\"-Q\",QUARTER(FROM_UNIXTIME(ship.time_bought))) AS label_printed_year_quarter,\n\tmerch.company AS brand_name,\n\tins.parameters->'$.limit' AS insurance_limit,\n\tROUND(AVG(ORD_VALUE),2) AS avg_ord_val\nFROM \n\tshipment AS ship\nINNER JOIN\n\tmerchant AS merch\nON\n\tship.merchant_id = merch.id\nINNER JOIN \n\tclient_ins AS cins\nON\n\tship.merchant_id = cins.merchant_id\nINNER JOIN \n\tinsurance AS ins\nON\n\tcins.insurance_id = ins.id\nINNER JOIN \n\torder_val as oval\nON\n\tship.id = oval.shipment_id\nWHERE \n\tship.time_bought >= UNIX_TIMESTAMP(20220101)\nGROUP BY \n\t1, 2, 3", "query_List_of_Customers_With_Insurance_(Excluding_Holiday_Insurance_Promo)_ZZD50g.json": "WITH `exclude` AS\n\t(\n\tSELECT\n\t\ts.id,\n\t\tDATE(FROM_UNIXTIME(s.time_bought)),\n\t\ts.insurance_external_cost,\n\t\ts.insurance_internal_cost,\n\t\tSUM(i.value) AS total_value\n\tFROM\n\t\tshipment s FORCE INDEX (shipment_time_bought_IDX)\n\tJOIN item i ON\n\t\ti.shipment_id = s.id\n\tWHERE 1 = 1\n\t\tAND s.time_bought BETWEEN 1637816400 AND 1641013200\n\t\tAND s.insurance_external_cost IS NOT NULL\n\t\tAND s.insurance_external_cost > 0\n\tHAVING total_value <= 100\n\t)\nSELECT \n\tm.company 'Customer', \n\tcl.company '3PL',\n\tCASE \n\t\tWHEN ci.archived = 0 THEN \"Insured\"\n\t\tELSE \"Not Insured Currently\"\n\tEND AS \"Current Insurance Status\",\n\tDATE(FROM_UNIXTIME(MIN(s.time_bought))) 'Start date',\n\tDATE(FROM_UNIXTIME(MAX(s.time_bought))) 'Last insured shipment',\n\tCOUNT(s.id) 'Shipments',\n\tCEILING(AVG(COALESCE(s.insurance_external_cost, 0) / 1.2)) * 100 'Avg insured amount',\n\tSUM(COALESCE(s.insurance_external_cost, 0)) AS 'Total Insurance Paid All Time'\nFROM\n\t(\n\tSELECT\n\t\tmerchant_id,\n\t\tclient_id,\n\t\ttime_bought,\n\t\ts.id,\n\t\tinsurance_external_cost\n\tFROM\n\t\tshipment s\n\tJOIN invoice_shipment inv ON\n\t\tinv.shipment_id = s.id\n\tWHERE\n\t\t1 = 1\n\t\tAND s.archived = 0\n\t\tAND s.is_voided = 0\n\t\tAND s.insurance_external_cost IS NOT NULL\n\t\tAND s.insurance_external_cost != 0\n\t\tAND s.id NOT IN (\n\t\tSELECT\n\t\t\tid\n\t\tFROM\n\t\t\t`exclude`)\n      ) s\nLEFT JOIN merchant m ON\n\tm.id = s.merchant_id\nLEFT JOIN client cl ON\n\tcl.id = s.client_id\nLEFT JOIN client_insurance ci \n\tON ci.merchant_id = m.id AND ci.client_id = cl.id\nWHERE\n\tcl.is_test = 0\n\tAND m.archived = 0\n\tAND m.company NOT IN (\"Passport\", \"ShipTest\", \"company2\", \"aboltest\")\nGROUP BY\n\tm.company,\n\tcl.company\nORDER BY\n\t`Start date` ASC;"}